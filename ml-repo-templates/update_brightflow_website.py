#!/usr/bin/env python3
"""
BrightFlow Website Updater
Updates the website repository with latest performance and transaction data
"""

import os
import sys
import json
import requests
import base64
from datetime import datetime, timezone

class BrightFlowWebsiteUpdater:
    def __init__(self):
        self.github_token = os.environ.get("BRIGHTFLOW_WEBSITE_TOKEN")
        if not self.github_token:
            raise ValueError("BRIGHTFLOW_WEBSITE_TOKEN environment variable not set")
            
        self.repo_owner = "AlbrightLaboratories"
        self.repo_name = "brightflow-buy-sell-order"
        self.base_url = f"https://api.github.com/repos/{self.repo_owner}/{self.repo_name}/contents"
        
        self.headers = {
            "Authorization": f"Bearer {self.github_token}",
            "Accept": "application/vnd.github.v3+json",
            "User-Agent": "BrightFlow-ML-Agent"
        }
    
    def update_file(self, file_path, content):
        """Update a file in the website repository"""
        url = f"{self.base_url}/{file_path}"
        
        try:
            # Get current file SHA (if exists)
            response = requests.get(url, headers=self.headers)
            sha = response.json().get("sha") if response.status_code == 200 else None
            
            # Prepare content
            if isinstance(content, dict):
                content_str = json.dumps(content, indent=2)
            else:
                content_str = str(content)
                
            encoded_content = base64.b64encode(content_str.encode()).decode()
            
            # Update file
            payload = {
                "message": f"Update {file_path} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
                "content": encoded_content
            }
            
            if sha:
                payload["sha"] = sha
            
            response = requests.put(url, json=payload, headers=self.headers)
            
            if response.status_code in [200, 201]:
                print(f"‚úÖ Successfully updated {file_path}")
                return True
            else:
                print(f"‚ùå Failed to update {file_path}: {response.status_code}")
                print(f"Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error updating {file_path}: {str(e)}")
            return False
    
    def load_generated_data(self):
        """Load the data files generated by ML pipeline"""
        try:
            # Load performance data
            with open("output/performance_data.json", "r") as f:
                performance_data = json.load(f)
                
            # Load transaction data  
            with open("output/transaction_data.json", "r") as f:
                transaction_data = json.load(f)
                
            # Load recommendations data
            with open("output/recommendations.json", "r") as f:
                recommendations_data = json.load(f)
                
            return performance_data, transaction_data, recommendations_data
            
        except FileNotFoundError as e:
            print(f"‚ùå Data file not found: {e}")
            print("Make sure ML pipeline generated the required output files")
            return None, None, None
        except json.JSONDecodeError as e:
            print(f"‚ùå Invalid JSON in data file: {e}")
            return None, None, None
    
    def update_website(self):
        """Main function to update website with latest data"""
        print("üöÄ Starting BrightFlow website update...")
        
        # Load generated data
        performance_data, transaction_data, recommendations_data = self.load_generated_data()
        
        if not performance_data or not transaction_data or not recommendations_data:
            print("‚ùå Failed to load generated data files")
            return False
        
        # --- GitHub Update ---
        print("\n--- Pushing data files to GitHub ---")
        # Update performance data
        success1 = self.update_file("data/performance.json", performance_data)
        
        # Update transaction data
        success2 = self.update_file("data/transactions.json", transaction_data)
        
        # Update recommendations data
        success3 = self.update_file("data/recommendations.json", recommendations_data)

        if success1 and success2 and success3:
            print("‚úÖ Website update completed successfully!")
            print(f"üìä Performance data: {len(performance_data.get('performance', {}).get('brightflow', []))} data points")
            print(f"üí∞ Transaction data: {len(transaction_data.get('transactions', []))} transactions")
            print(f"üìà Recommendations data: {len(recommendations_data.get('recommendations', []))} recommendations")
            print(f"üïê Last updated: {datetime.now().isoformat()}")
            return True
        else:
            print("‚ùå Website update failed")
            return False

def main():
    try:
        updater = BrightFlowWebsiteUpdater()
        success = updater.update_website()
        
        if not success:
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Fatal error: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()