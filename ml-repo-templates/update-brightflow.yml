name: Update BrightFlow Website
on:
  schedule:
    - cron: '30 9-23 * * *'    # Every hour 4:30 AM - 7:30 PM EST (UTC-5)
    - cron: '30 0-1 * * *'     # Covers 7:30-8:30 PM EST
  
  # Manual trigger for emergency updates or testing
  workflow_dispatch:
    inputs:
      emergency_update:
        description: 'Force update regardless of schedule'
        required: false
        default: 'false'
        type: boolean

jobs:
  update-brightflow:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout ML Repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install requests pandas numpy yfinance python-dateutil
        # Add your specific ML dependencies here
        # pip install -r requirements.txt  # if you have a requirements.txt
        
    - name: Check Trading Hours (EST)
      id: check_hours
      run: |
        python3 << EOF
        from datetime import datetime, timezone, timedelta
        import os
        
        # Get current time in EST
        est = timezone(timedelta(hours=-5))
        now_est = datetime.now(est)
        hour = now_est.hour
        minute = now_est.minute
        
        # Check if we're in trading hours (4:30 AM - 8:00 PM EST)
        is_trading_hours = (hour > 4 or (hour == 4 and minute >= 30)) and hour < 20
        
        # Allow manual override
        force_update = "${{ github.event.inputs.emergency_update }}" == "true"
        
        should_run = is_trading_hours or force_update
        
        print(f"Current EST time: {now_est}")
        print(f"Trading hours: {is_trading_hours}")
        print(f"Force update: {force_update}")
        print(f"Should run: {should_run}")
        
        # Set output for next steps
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"should_run={str(should_run).lower()}\n")
            f.write(f"current_time={now_est.isoformat()}\n")
        EOF
        
    - name: Run ML Pipeline
      if: steps.check_hours.outputs.should_run == 'true'
      env:
        # Add your API keys as repository secrets
        ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
        POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
        FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
        # Add other market data API keys as needed
      run: |
        echo "Starting ML pipeline at $(date)"
        python generate_brightflow_predictions.py
        
    - name: Calculate Performance vs Benchmarks
      if: steps.check_hours.outputs.should_run == 'true'
      run: |
        echo "Calculating performance vs benchmarks"
        python calculate_performance_vs_benchmarks.py
        
    - name: Generate Website Data Files
      if: steps.check_hours.outputs.should_run == 'true'
      run: |
        echo "Generating JSON files for website"
        python prepare_website_data.py
        
    - name: Update Website Repository
      if: steps.check_hours.outputs.should_run == 'true'
      env:
        BRIGHTFLOW_WEBSITE_TOKEN: ${{ secrets.BRIGHTFLOW_WEBSITE_TOKEN }}
      run: |
        echo "Updating website data files"
        python update_brightflow_website.py
        
    - name: Verify Website Update
      if: steps.check_hours.outputs.should_run == 'true'
      run: |
        echo "Verifying website update was successful"
        python verify_website_update.py
        
    - name: Log Successful Update
      if: steps.check_hours.outputs.should_run == 'true' && success()
      run: |
        echo "✅ BrightFlow website updated successfully at $(date)"
        echo "Next update scheduled for $(date -d '+1 hour')"
        
    - name: Handle Errors
      if: failure()
      run: |
        echo "❌ BrightFlow update failed at $(date)"
        echo "Check logs and consider manual intervention"
        echo "Website will continue showing last known good data"
        # Optionally send notifications here (Slack, Discord, email)
        
    - name: Skip Non-Trading Hours
      if: steps.check_hours.outputs.should_run == 'false'
      run: |
        echo "⏰ Outside trading hours (4:30 AM - 8 PM EST)"
        echo "Current time: ${{ steps.check_hours.outputs.current_time }}"
        echo "Skipping update - next check in 1 hour"