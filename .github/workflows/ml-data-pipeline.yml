name: ML Data Pipeline

# DESCRIPTION: 
# This workflow runs the complete ML data pipeline every 2 hours during market hours
# and every 6 hours outside market hours. It performs:
# 1. ML Learning System - Creates GitHub issues for algorithm experiments
# 2. Site Data Reader - Fetches and processes data from the BrightFlow website
# 3. Competitor Monitor - Tracks SPY, VFIAX, SPDR performance vs BrightFlow
# 4. Safe Data Updates - Commits all data with merge conflict prevention
# 
# SCHEDULE: Every 2 hours during market hours (9 AM - 4 PM EST), every 6 hours otherwise
# TRIGGERS: Manual dispatch, push to main branch
# OUTPUTS: Updated performance.json, transactions.json, competitor data

on:
    schedule:
        # Run every 2 hours during market hours (9 AM - 4 PM EST)
        - cron: "0 9,11,13,15 * * 1-5"
        # Run every 6 hours outside market hours
        - cron: "0 0,6,12,18 * * *"
    workflow_dispatch: # Allow manual trigger
    push:
        branches:
            - main

jobs:
    ml-learning:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.9"

            - name: Install dependencies
              run: |
                  pip install requests pandas numpy

            - name: Run ML Learning System
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  python ml_learning_system.py

    site-data-reader:
        runs-on: ubuntu-latest
        needs: ml-learning
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.9"

            - name: Install dependencies
              run: |
                  pip install requests pandas numpy scikit-learn

            - name: Run Site Data Reader
              run: |
                  python site_data_reader.py

    competitor-monitor:
        runs-on: ubuntu-latest
        needs: [ml-learning, site-data-reader]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.9"

            - name: Install dependencies
              run: |
                  pip install yfinance requests pandas numpy scikit-learn

            - name: Run Competitor Monitor
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  python competitor_monitor.py

    update-website:
        runs-on: ubuntu-latest
        needs: [ml-learning, site-data-reader, competitor-monitor]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Safe commit and push data updates
                run: |
                    git config --local user.email "action@github.com"
                    git config --local user.name "GitHub Action"

                    # Use safe update script to prevent merge conflicts
                    echo "🔒 Using safe update mechanism to prevent merge conflicts..."
                    
                    # Create a simple lock file to prevent concurrent updates
                    LOCK_FILE="data/.update_lock"
                    MAX_WAIT=30
                    WAIT_TIME=0
                    
                    # Wait for lock to be released
                    while [ -f "$LOCK_FILE" ] && [ $WAIT_TIME -lt $MAX_WAIT ]; do
                        echo "⏳ Waiting for lock to be released... (${WAIT_TIME}s)"
                        sleep 1
                        WAIT_TIME=$((WAIT_TIME + 1))
                    done
                    
                    if [ -f "$LOCK_FILE" ]; then
                        echo "❌ Could not acquire lock after $MAX_WAIT seconds"
                        exit 1
                    fi
                    
                    # Create lock file
                    echo "Locked by ML data pipeline at $(date)" > "$LOCK_FILE"
                    echo "🔒 Lock acquired for data updates"
                    
                    # Add all data files
                    git add data/

                    # Check if there are changes
                    if git diff --staged --quiet; then
                        echo "No changes to commit"
                    else
                        git commit -m "🤖 Auto-update ML data pipeline - $(date)"
                        git push
                    fi
                    
                    # Remove lock file
                    rm -f "$LOCK_FILE"
                    echo "🔓 Lock released for data updates"
