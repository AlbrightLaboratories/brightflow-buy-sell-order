name: Update BrightFlow Data

on:
  # Allow manual trigger
  workflow_dispatch:
  
  # Allow trigger from external repositories
  repository_dispatch:
    types: [update-brightflow-data]

  # Schedule updates 24/7 for maximum money-making opportunities
  schedule:
    - cron: '*/15 * * * *'      # Every 15 minutes, 24/7
    - cron: '*/5 9-16 * * 1-5'  # Every 5 minutes during US market hours (9 AM - 4 PM EST)
    - cron: '*/10 0-8 * * *'    # Every 10 minutes during Asian/European hours
    - cron: '*/20 17-23 * * *'  # Every 20 minutes during evening hours

jobs:
  update-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update performance data
      run: |
        # 24/7 money making mode - always update!
        echo "üöÄ Updating performance data - 24/7 money making mode..."
        echo "Current time: $(date)"
        echo "Market focus: ${{ github.event.inputs.market_focus || 'all' }}"
        
        # If triggered via repository_dispatch, the data will be in github.event.client_payload
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "üìä Received data from ML repository"
          echo '${{ toJSON(github.event.client_payload.performance_data) }}' > data/performance.json
          echo '${{ toJSON(github.event.client_payload.transaction_data) }}' > data/transactions.json
        else
          echo "‚è∞ Scheduled update - checking for new data..."
          # In a real implementation, this would fetch from your ML API
          # For now, we'll just update the timestamp to show activity
          python3 -c "
          import json
          import datetime
          
          # Update the lastUpdated timestamp to show 24/7 activity
          try:
              with open('data/performance.json', 'r') as f:
                  data = json.load(f)
              data['lastUpdated'] = datetime.datetime.now(datetime.timezone.utc).isoformat()
              data['updateMode'] = '24-7-aggressive'
              data['marketFocus'] = '${{ github.event.inputs.market_focus || 'all' }}'
              
              with open('data/performance.json', 'w') as f:
                  json.dump(data, f, indent=2)
              print('‚úÖ Updated performance data timestamp')
          except Exception as e:
              print(f'‚ö†Ô∏è Could not update performance data: {e}')
          "
        fi
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/*.json
        
        # Only commit if there are changes
        if ! git diff --staged --quiet; then
          git commit -m "Update BrightFlow data - $(date)"
          git push
        else
          echo "No changes to commit"
        fi